/**
 * This class is generated by jOOQ
 */
package ma.jberrich.database.tables.records;


import javax.annotation.Generated;

import ma.jberrich.database.tables.Dept;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DeptRecord extends UpdatableRecordImpl<DeptRecord> implements Record3<Integer, String, String> {

	private static final long serialVersionUID = -1902739591;

	/**
	 * Setter for <code>employesdb.dept.DEPTNO</code>.
	 */
	public void setDeptno(Integer value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>employesdb.dept.DEPTNO</code>.
	 */
	public Integer getDeptno() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>employesdb.dept.DNAME</code>.
	 */
	public void setDname(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>employesdb.dept.DNAME</code>.
	 */
	public String getDname() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>employesdb.dept.LOC</code>.
	 */
	public void setLoc(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>employesdb.dept.LOC</code>.
	 */
	public String getLoc() {
		return (String) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, String> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, String, String> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return Dept.DEPT.DEPTNO;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Dept.DEPT.DNAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return Dept.DEPT.LOC;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getDeptno();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getDname();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getLoc();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DeptRecord value1(Integer value) {
		setDeptno(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DeptRecord value2(String value) {
		setDname(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DeptRecord value3(String value) {
		setLoc(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public DeptRecord values(Integer value1, String value2, String value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached DeptRecord
	 */
	public DeptRecord() {
		super(Dept.DEPT);
	}

	/**
	 * Create a detached, initialised DeptRecord
	 */
	public DeptRecord(Integer deptno, String dname, String loc) {
		super(Dept.DEPT);

		setValue(0, deptno);
		setValue(1, dname);
		setValue(2, loc);
	}
}
